package edu.wcu.cs.cs263.honors.gui;

/**
 * @author: Tyler Allen
 * @author: Alisha Hayman
 * @version: 03/26/2013
 *
 * This class extends JPanel and serves as a container and coordinator of 
 * the buttons used t oselect the type of drawing users wish to create.
 */

/** We maintain a list of ButtonSelectionListeners. */
import java.util.List;
/** The concrete list that we used for our list is a LinkedList. */
import java.util.LinkedList;
/** Used for extracting all buttons from the ButtonGroup and adding them 
 * to the list.*/
import java.util.Enumeration;
/** We receive ActionEvents. */
import java.awt.event.ActionEvent;
/** We create AbstractButtons. */
import javax.swing.AbstractButton;
/** We use the BoxLayout for this JPanel. */
import javax.swing.BoxLayout;
/** We keep our buttons in a ButtonGroup. */
import javax.swing.ButtonGroup;
/** We extend JPanel. */
import javax.swing.JPanel;
/** Our buttons contain Icons. */
import javax.swing.Icon;
/** Our Icons are ImageIcons. */
import javax.swing.ImageIcon;
/** Our buttons are all JToggleButtons. */
import javax.swing.JToggleButton;
/** We create AbstractActions. */
import javax.swing.AbstractAction;
/** We generate all of these shape producers. */
import edu.wcu.cs.cs263.honors.gui.shape.producer.ShapeProducer;
import edu.wcu.cs.cs263.honors.gui.shape.producer.NullShapeProducer;
import edu.wcu.cs.cs263.honors.gui.shape.producer.LineProducer;
import edu.wcu.cs.cs263.honors.gui.shape.producer.RectangleProducer;
import edu.wcu.cs.cs263.honors.gui.shape.producer.FilledRectangleProducer;
import edu.wcu.cs.cs263.honors.gui.shape.producer.OvalProducer;
import edu.wcu.cs.cs263.honors.gui.shape.producer.FilledOvalProducer;
import edu.wcu.cs.cs263.honors.gui.shape.producer.CurveProducer;

public class ShapeButtonPanel extends JPanel
{
    /** Current UID of this program. */
    private static final long serialVersionUID = 1;
    /** List tracking our ButtonSelectionListeners. */
    List<ButtonSelectionListener> list;
    /** The group of our buttons. */
    ButtonGroup buttons;
    /** The current ShapeProducer to return. */
    ShapeProducer current;
    
    /**
     * Creates a new ShapeButtonPanel.
     * @precondition: None.
     * @postcondition: All fields will be initialized.
     */
    public ShapeButtonPanel()
    {
        this.setLayout(new BoxLayout(this, BoxLayout.PAGE_AXIS));
        buttons = new ButtonGroup();
        Icon line = new ImageIcon(getClass().getResource("line.png"));
        Icon rectangle = new ImageIcon(getClass().
                                       getResource("outline_square.png"));
        Icon frectangle = new ImageIcon(getClass().getResource("square.png"));
        Icon oval = new ImageIcon(getClass().getResource("outline_circle.png"));
        Icon foval = new ImageIcon(getClass().getResource("circle.png"));
        Icon curve = new ImageIcon(getClass().getResource("curve.png"));
        buttons.add(JToggleButtonMaker("", line));
        buttons.add(JToggleButtonMaker("", rectangle));
        buttons.add(JToggleButtonMaker("", frectangle));
        buttons.add(JToggleButtonMaker("", oval));
        buttons.add(JToggleButtonMaker("", foval));
        buttons.add(JToggleButtonMaker("", curve));
        for (Enumeration<AbstractButton> button = buttons.getElements(); 
             button.hasMoreElements();)
        {
            JToggleButton temp = (JToggleButton)button.nextElement();
            this.add(temp);
        }
        list = new LinkedList<ButtonSelectionListener>();
    }
    /**
     * TODO: This isn't what it says in the pdf but it helps do what we need
     * to do... the pdf is confusing, so if we can't keep it at least we can
     * keep working for now. May not be need to be changed...
     *
     * TODO: Matching which button is pressed is not done in the most graceful
     * way...
     */
    /**
     * A helper function for creating JToggleButtonMakers.
     * @param: title  The title of the button. 
     * @param: image  The image used for the button.
     * @precondition: true
     * @postcondition: A JToggleButtonMaker will be created.
     */
    private JToggleButton JToggleButtonMaker(String title, Icon image)//change to icon
    {
        /**
         * Anonymous inner class used for creating the new JToggleButton.
         */
        JToggleButton temp = new JToggleButton(new AbstractAction(title, image)
        {
            /** The current serialVersionUID for this program. */
            private static final long serialVersionUID = 1;
            /**
             * When this button is pressed, we identify which button was 
             * pressed and create a new shape producer accordingly.
             * @param: e  The event generated by the button being pressed.
             * @precondition: true
             * @postcondition: this.producer becomes the new producer.
             */
            public void actionPerformed(ActionEvent e)
            {
                JToggleButton button = (JToggleButton)e.getSource();
                button.setSelected(true);
                int i = -1;
                AbstractButton compareMe = null;
                for (Enumeration<AbstractButton> temp = buttons.getElements();
                     temp.hasMoreElements() && button != compareMe ; i++)
                {
                    compareMe = temp.nextElement();
                }
                switch (i)
                {
                    case 0:
                        current = new LineProducer();
                        break;
                    case 1:
                        current = new RectangleProducer();
                        break;
                    case 2:
                        current = new FilledRectangleProducer();
                        break;
                    case 3:
                        current = new OvalProducer();
                        break;
                    case 4:
                        current = new FilledOvalProducer();
                        break;
                    case 5:
                        current = new CurveProducer();
                        break;
                    default: 
                        current = new NullShapeProducer();
                        // error check...
                        System.err.println("Shape button not found...");
                        break;
                }
                for (ButtonSelectionListener listener : list)
                {
                    listener.selectionChanged(current);
                }
            }
        });
        return temp;
    }
    
    /**
     * Adds a new ButtonSelectionListener to our list of 
     * ButtonSelectionListeners.
     * @param: bsl The buttonSelectionListener to add to our list of listeners.
     * @precondition: true
     * @postcondition: |listeners| = |#listeners| + 1
     */
    public void addButtonSelectionListener(ButtonSelectionListener bsl)
    {
        list.add(bsl);
    } 
}
